package NIO;import java.io.File;import java.io.IOException;import java.nio.MappedByteBuffer;import java.nio.channels.FileChannel;import java.nio.channels.FileChannel.MapMode;import java.nio.file.Paths;import java.nio.file.StandardOpenOption;/** * @param * @author Administrator * @date 2021/4/11 0011 16:22 * @throws Exception */public class Demo5 {    public static void main(String[] args) throws IOException {        FileChannel inChannel = FileChannel.open(Paths.get("C:\\Users\\Administrator\\Pictures\\213\\1.jpg"), StandardOpenOption.READ);        //outChannel 需要为READ WRITE CREATE 模式        //READ WRITE 是因为后面获取直接缓冲区时模式为READ_WRITE模式        //CREATE 是因为要创建新文件        FileChannel outChannel = FileChannel.open(Paths.get("C:\\Users\\Administrator\\Pictures\\213\\2.jpg"), StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.CREATE);        //获取直接缓冲区        MappedByteBuffer inMapBuf=inChannel.map(FileChannel.MapMode.READ_ONLY,0, inChannel.size());        MappedByteBuffer outMapBuf=outChannel.map(FileChannel.MapMode.READ_WRITE,0, inChannel.size());        //字节数组        byte[] bytes = new byte[inMapBuf.limit()];        //因为是直接缓冲区，可以直接将数据放入到内存映射文件，无需通过通道传输        inMapBuf.get(bytes);        outMapBuf.put(bytes);        //关闭缓冲区        inChannel.close();        outChannel.close();    }}