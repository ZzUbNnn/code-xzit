import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;public class test4 {    public static void main(String[] args) {        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));        try {            int n = Integer.parseInt(bf.readLine()); // 输入 有多少个分数            String[] strings = bf.readLine().split(" "); // 输入 分数 , 并处理成字符串数组            int[] denominators = new int[n], //存储分母                    molecules = new int[n]; //存储分子            String[] temp;  //临时变量            for (int i = 0; i < n; i++) { //把分数的分子分母分开 存入 denominators数组 和molecules数组                temp = strings[i].split("/");                molecules[i] = Integer.parseInt(temp[0]);                denominators[i] = Integer.parseInt(temp[1]);            }            //接下来,要分母同步  先找出最大的分母            int maxDenominators = maxValInArray(denominators);//返回数组中最大的公倍数            //同步分母和分子            int mol = 0 ;//存储倍数            for (int i = 0; i < n; i++) {                mol = maxDenominators/denominators[i];                molecules[i] *= mol;  // 分子同步            }            //分子相加            int sum = sumArray(molecules); //数组求和函数            //计算整数部分            int intpp = sum / maxDenominators;            //分数部分            int score = sum % maxDenominators;            //输出            //整数部分            if (intpp != 0){                System.out.print(intpp);                System.out.print(" ");            }            //分数部分            if (score != 0){                int maxDivisor = gcd(score ,maxDenominators); // 求最大公约数                score /= maxDivisor;// 最大公约数                maxDenominators /= maxDivisor;                System.out.print(score+"/"+maxDenominators);            }        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * 返回数组中最大的公分母     * @param array     * @return int     */    public static int maxValInArray(int[] array){        int max = array[0];        for (int i = 0; i < array.length; i++) {            if (max % array[i] == 0 || array[i] % max == 0){                max = Math.max(max , array[i]);            }else{                max *= array[i];            }        }        return max;    }    /**     * 整个数组值的和     * @param array     * @return int     */    public static int sumArray(int[] array){        int sum=0;        for (int i = 0; i < array.length; i++) {            sum += array[i];        }        return sum;    }    /**     * 求最大公约数, 已知 mol < den     * @param mol     * @param den     * @return     */    public static int gcd(int mol , int den){        int r = den % mol;        while (r>0){            den = mol;            mol = r;            r = den % mol;        }        return mol;    }}